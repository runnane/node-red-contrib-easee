name: Test Suite

on:
  push:
    branches: [ main, develop, refactor-to-modular-design ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Test Node.js ${{ matrix.node-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x, 24.x]
        os: [ubuntu-latest, windows-latest, macos-latest]
        # Exclude some combinations to reduce CI load if needed
        # exclude:
        #   - node-version: 18.x
        #     os: windows-latest
          
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linting
      run: npm run lint
      continue-on-error: true  # Don't fail the build on linting errors
      
    - name: Run tests
      run: npm test
      
    - name: Run coverage tests
      run: npm run test:coverage
      if: matrix.node-version == '20.x' && matrix.os == 'ubuntu-latest'
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      if: matrix.node-version == '20.x' && matrix.os == 'ubuntu-latest'
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  compatibility-check:
    name: Node-RED Compatibility Check
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-red-version: ['3.0.0', '3.1.0', '4.0.0']
        node-version: ['18.x', '20.x']
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Install Node-RED ${{ matrix.node-red-version }}
      run: npm install node-red@${{ matrix.node-red-version }} --no-save
      
    - name: Run Node-RED compatibility tests
      run: npm test -- --testPathPattern=integration
      
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run security audit
      run: npm audit --audit-level moderate
      
    - name: Check for outdated dependencies
      run: npx npm-check-updates --errorLevel 1
      continue-on-error: true

  publish-check:
    name: Publish Dry Run
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Test package
      run: npm pack --dry-run
      
    - name: Check package contents
      run: npx publint
